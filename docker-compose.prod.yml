version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile.prod
    image: logoss_django_prod
    container_name: logoss_django_prod
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=config.settings.prod
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db_postgres
      - DB_PORT=5432
      - ORACLE_USER=${ORACLE_USER}
      - ORACLE_PASSWORD=${ORACLE_PASSWORD}
      - ORACLE_DSN=db_oracle:1521/XEPDB1
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db_postgres
      - db_oracle
      - redis
    networks:
      - logoss_network
      
  nginx:
    build:
      context: ./compose/nginx
    container_name: logoss_nginx
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - logoss_network
      
  db_postgres:
    image: postgres:16-alpine
    container_name: logoss_postgres_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
      - ./compose/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logoss_network
      
  db_oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    container_name: logoss_oracle_prod
    volumes:
      - oracle_data_prod:/opt/oracle/oradata
      - ./compose/oracle/init.sql:/opt/oracle/scripts/startup/init.sql
    environment:
      - ORACLE_PWD=${ORACLE_PWD}
    shm_size: 1g
    networks:
      - logoss_network

  redis:
    image: redis:7-alpine
    container_name: logoss_redis_prod
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logoss_network

networks:
  logoss_network:
    driver: bridge

volumes:
  postgres_data_prod:
  oracle_data_prod:
  redis_data_prod:
  static_volume:
  media_volume:
