# Generated by Django 5.2.1 on 2025-05-10 19:25

import apps.users.models.auth.managers
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nome do evento')),
                ('short_name', models.CharField(max_length=50, verbose_name='Nome abreviado')),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='Código')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'Evento do sistema',
                'verbose_name_plural': 'Eventos do sistema',
                'db_table': 'EVENTO_SISTEMA',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nome')),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='Código')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'Permissão',
                'verbose_name_plural': 'Permissões',
                'db_table': 'PERMISSAO',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Nome de usuário')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Nome')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Sobrenome')),
                ('registration_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Matrícula')),
                ('user_type', models.IntegerField(choices=[(1, 'Policial'), (2, 'Administrativo'), (3, 'Administrador')], default=1, verbose_name='Tipo de usuário')),
                ('status', models.IntegerField(choices=[(1, 'Ativo'), (0, 'Inativo'), (2, 'Suspenso')], default=1, verbose_name='Status')),
                ('login_attempts', models.PositiveIntegerField(default=0, verbose_name='Tentativas de login')),
                ('lockout_until', models.DateTimeField(blank=True, null=True, verbose_name='Bloqueado até')),
                ('password_changed_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Senha alterada em')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP do último login')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'USUARIOS',
                'ordering': ['username'],
            },
            managers=[
                ('objects', apps.users.models.auth.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True, verbose_name='Data/hora')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Endereço IP')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True, verbose_name='User Agent')),
                ('session_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID da sessão')),
                ('success', models.BooleanField(default=True, verbose_name='Sucesso')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Detalhes')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Log de acesso',
                'verbose_name_plural': 'Logs de acesso',
                'db_table': 'USUARIO_ACESSO_LOG',
                'ordering': ['-date_time'],
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permission', models.IntegerField(choices=[(0, 'Não'), (1, 'Sim')], default=0, verbose_name='Permissão')),
                ('legacy_value', models.CharField(blank=True, max_length=1, null=True, verbose_name='Valor legado')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_permissions', to='users.eventpermission', verbose_name='Evento')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_permissions', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Permissão do usuário',
                'verbose_name_plural': 'Permissões dos usuários',
                'db_table': 'USUARIO_PERMISSAO',
                'unique_together': {('user', 'event')},
            },
        ),
    ]
